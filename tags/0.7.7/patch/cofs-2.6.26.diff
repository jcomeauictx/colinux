Implements host filesystem support


Index: linux-2.6.26-source/fs/Kconfig
===================================================================
--- linux-2.6.26-source.orig/fs/Kconfig
+++ linux-2.6.26-source/fs/Kconfig
@@ -1199,6 +1199,19 @@
 	  containing the directory /) cannot be compiled as a module.
 
 
+config COFUSE_FS
+	tristate "Cooperative Host file system support (COFUSE)"
+	depends on COOPERATIVE
+	default y
+	help
+	  In Cooperative mode, this file system allows you to mount an host
+	  directory structure to a local mountpoint.
+	  COFUSE (Cooperative FUSE) is based on the original FUSE
+	  (File System in User Space).
+
+	  To compile the cofuse support as a module, choose M here: the
+	  module will be called cofusefs.
+
 
 config EFS_FS
 	tristate "EFS file system support (read only) (EXPERIMENTAL)"
Index: linux-2.6.26-source/fs/Makefile
===================================================================
--- linux-2.6.26-source.orig/fs/Makefile
+++ linux-2.6.26-source/fs/Makefile
@@ -109,6 +109,7 @@
 obj-$(CONFIG_AUTOFS4_FS)	+= autofs4/
 obj-$(CONFIG_ADFS_FS)		+= adfs/
 obj-$(CONFIG_FUSE_FS)		+= fuse/
+obj-$(CONFIG_COFUSE_FS)		+= cofusefs/
 obj-$(CONFIG_UDF_FS)		+= udf/
 obj-$(CONFIG_SUN_OPENPROMFS)	+= openpromfs/
 obj-$(CONFIG_JFS_FS)		+= jfs/
Index: linux-2.6.26-source/fs/cofusefs/Makefile
===================================================================
--- /dev/null
+++ linux-2.6.26-source/fs/cofusefs/Makefile
@@ -0,0 +1,8 @@
+#
+# Makefile for the Linux cofuse filesystem routines.
+#
+
+obj-$(CONFIG_COFUSE_FS) += cofusefs.o
+
+cofusefs-objs := inode.o dir.o file.o util.o dev.o
+
Index: linux-2.6.26-source/fs/cofusefs/dir.c
===================================================================
--- linux-2.6.26-source.orig/fs/cofusefs/dir.c
+++ linux-2.6.26-source/fs/cofusefs/dir.c
@@ -72,15 +72,17 @@
 {
 	struct inode *inode;
 
-	inode = iget(sb, ino);
-	if(inode) {
-		if (!inode->i_private)
-			fuse_init_inode(inode, attr);
-
-		change_attributes(inode, attr);
+	inode = iget_locked(sb, ino);
+	if (!inode)
+		return ERR_PTR(-ENOMEM);
+	if ((inode->i_state & I_NEW)) {
+		fuse_init_inode(inode, attr);
 		inode->i_version = version;
+		unlock_new_inode(inode);
 	}
 
+	change_attributes(inode, attr);
+
 	return inode;
 }
 
@@ -119,8 +121,8 @@
 	err = fuse_do_lookup(dir, entry, &outarg, &version);
 	if(!err) {
 		inode = fuse_iget(dir->i_sb, outarg.ino, &outarg.attr, version);
-		if(!inode)
-			return -ENOMEM;
+		if (IS_ERR(inode))
+			return PTR_ERR(inode);
 	} else if(err != -ENOENT)
 		return err;
 
@@ -173,8 +175,8 @@
 		return out.h.error;
 
 	inode = fuse_iget(dir->i_sb, outarg.ino, &outarg.attr, out.h.unique);
-	if(!inode)
-		return -ENOMEM;
+	if (IS_ERR(inode))
+		return PTR_ERR(inode);
 
 	/* Don't allow userspace to do really stupid things... */
 	if((inode->i_mode ^ mode) & S_IFMT) {
Index: linux-2.6.26-source/fs/cofusefs/file.c
===================================================================
--- linux-2.6.26-source.orig/fs/cofusefs/file.c
+++ linux-2.6.26-source/fs/cofusefs/file.c
@@ -369,10 +369,10 @@
 		/* FIXME: check sync_mode, and wait for previous writes (or
 		   signal userspace to do this) */
 		if(wbc->nonblocking) {
-			SetPageWriteback(page);
+			TestSetPageWriteback(page);
 			err = write_buffer_nonblock(inode, page, 0, count);
 			if (err)
-				ClearPageWriteback(page);
+				TestClearPageWriteback(page);
 			if(err == -EWOULDBLOCK) {
 				__set_page_dirty_nobuffers(page);
 				err = 0;
@@ -417,7 +417,7 @@
 	.open		= fuse_open,
 	.release	= fuse_release,
 	.fsync		= fuse_fsync,
-	.sendfile	= generic_file_sendfile,
+	.splice_read	= generic_file_splice_read,
 };
 
 static struct address_space_operations fuse_file_aops  = {
Index: linux-2.6.26-source/fs/cofusefs/inode.c
===================================================================
--- linux-2.6.26-source.orig/fs/cofusefs/inode.c
+++ linux-2.6.26-source/fs/cofusefs/inode.c
@@ -15,6 +15,7 @@
 #include <linux/ctype.h>
 #include <linux/proc_fs.h>
 #include <linux/statfs.h>
+#include <linux/exportfs.h>
 
 #define FUSE_SUPER_MAGIC 0x65735546
 
@@ -22,10 +23,12 @@
 #define FS_BINARY_MOUNTDATA 0
 #endif
 
+#if 0 /* FIXME: ? */
 static void fuse_read_inode(struct inode *inode)
 {
 	/* No op */
 }
+#endif
 
 static void fuse_clear_inode(struct inode *inode)
 {
@@ -182,7 +185,7 @@
 	return fuse_iget(sb, 1, &attr, 0);
 }
 
-
+#if 0 /* FIXME: Can this remove? */
 static struct dentry *fuse_get_dentry(struct super_block *sb, void *vobjp)
 {
 	__u32 *objp = vobjp;
@@ -210,9 +213,12 @@
 static struct export_operations fuse_export_operations = {
 	.get_dentry	= fuse_get_dentry,
 };
+#endif
 
 static struct super_operations fuse_super_operations = {
+#if 0 /* FIXME: ? */
 	.read_inode	= fuse_read_inode,
+#endif
 	.clear_inode	= fuse_clear_inode,
 	.put_super	= fuse_put_super,
 	.statfs		= fuse_statfs,
@@ -229,7 +235,10 @@
 	sb->s_magic = FUSE_SUPER_MAGIC;
 	sb->s_op = &fuse_super_operations;
 	sb->s_maxbytes = MAX_LFS_FILESIZE;
+
+#if 0 /* FIXME: Can this remove? */
 	sb->s_export_op = &fuse_export_operations;
+#endif
 
 	fc = co_get_conn(co_d);
 	if(fc == NULL)
