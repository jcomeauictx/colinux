cobd reimplement as asynchronous

* Use kernel parameter "setcobd=async" to enable async mode.
  Running in async mode can see as counts from interrupt 15.
  Without this parameter, the old sync mode will be use.

Index: linux-2.6.22-source/drivers/block/cobd.c
===================================================================
--- linux-2.6.22-source.orig/drivers/block/cobd.c
+++ linux-2.6.22-source/drivers/block/cobd.c
@@ -18,6 +18,7 @@
 #include <linux/file.h>
 #include <linux/ioctl.h>
 #include <linux/ctype.h>
+#include <linux/interrupt.h>
 
 #include <asm/uaccess.h>
 #include <asm/types.h>
@@ -26,6 +27,7 @@
 static int const hardsect_size_shift = 9;
 static int const cobd_max = CO_MODULE_MAX_COBD;
 static spinlock_t cobd_lock = SPIN_LOCK_UNLOCKED;
+static int cobd_async_mode;
 
 struct cobd_device {
 	int unit;
@@ -101,7 +103,7 @@
 	co_passage_page->params[0] = CO_DEVICE_BLOCK;
 	co_passage_page->params[1] = cobd->unit;
 	co_request = (co_block_request_t *)&co_passage_page->params[2];
-	co_request->type = CO_BLOCK_OPEN;
+	co_request->type = (cobd_async_mode) ? CO_BLOCK_ASYNC_OPEN: CO_BLOCK_OPEN;
 	co_switch_wrapper();
 	if (co_request->rc)
 		result = -EIO;
@@ -163,10 +165,8 @@
 	co_passage_page->params[0] = CO_DEVICE_BLOCK;
 	co_passage_page->params[1] = cobd->unit;
 	co_request = (co_block_request_t *)&co_passage_page->params[2];
-	if (!rq_data_dir(req))
-		co_request->type = CO_BLOCK_READ;
-	else
-		co_request->type = CO_BLOCK_WRITE;
+	co_request->type = (rq_data_dir(req) == READ) ? CO_BLOCK_READ : CO_BLOCK_WRITE;
+	co_request->irq_request = (cobd_async_mode) ? req : NULL;
 	co_request->offset = ((unsigned long long)(req->sector)) << hardsect_size_shift;
 	co_request->size = req->current_nr_sectors << hardsect_size_shift;
 	co_request->address = req->buffer;
@@ -193,10 +193,49 @@
 		cobd = (struct cobd_device *)(req->rq_disk->private_data);
 
 		ret = cobd_transfer(cobd, req);
+		if (ret == 0 && cobd_async_mode)
+			break; /* wait for interrupt */
+
+		/*
+		 * OK:   ret == 0 --> uptodate = 1
+		 * FAIL: ret == 1 --> uptodate = 0
+		 */
 		end_request(req, ret ? 0 : 1);
         }
 }
 
+static irqreturn_t cobd_interrupt(int irq, void *dev_id)
+{
+	co_message_node_t *input;
+
+	while (co_get_message(&input, CO_DEVICE_BLOCK)) {
+		co_linux_message_t *message;
+		co_block_intr_t *intr;
+		struct request *req;
+
+		message = (co_linux_message_t *)&input->msg.data;
+		if (message->unit < 0  ||  message->unit >= CO_MODULE_MAX_COBD) {
+			printk("cobd interrupt: buggy unit reception: %x\n", message->unit);
+			goto goto_next_message;
+		}
+
+		BUG_ON(message->size != sizeof(co_block_intr_t));
+		intr = (co_block_intr_t *)message->data;
+		req = intr->irq_request;
+		BUG_ON(!req);
+
+		spin_lock(&cobd_lock);
+		end_request(req, intr->uptodate);
+		do_cobd_request(req->q);
+		spin_unlock(&cobd_lock);
+
+goto_next_message:
+		co_free_message(input);
+	}
+
+	return IRQ_HANDLED;
+}
+
 static struct block_device_operations cobd_fops = {
 	.owner   = THIS_MODULE,
 	.open    = cobd_open,
@@ -208,9 +247,17 @@
 {
 	int result, i;
 
+	if (cobd_async_mode) {
+		if (request_irq(BLOCKDEV_IRQ, &cobd_interrupt, 0, "cobd", NULL)) {
+			printk("cobd: unable to get IRQ%d\n", BLOCKDEV_IRQ);
+			return -EBUSY;
+		}
+	}
+
 	if (register_blkdev(COLINUX_MAJOR, "cobd")) {
 		printk(KERN_WARNING "Unable to get major number %d for cobd device\n", COLINUX_MAJOR);
-		return -EIO;
+		result = -EIO;
+		goto fail_irq;
 	}
 
 	result = -ENOMEM; /* for the possible errors */
@@ -266,6 +313,9 @@
 	if (unregister_blkdev(COLINUX_MAJOR, "cobd"))
 		printk(KERN_WARNING "cobd: cannot unregister blkdev\n");
 
+fail_irq:
+	if (cobd_async_mode)
+		free_irq(BLOCKDEV_IRQ, NULL);
 	return result;
 }
 
@@ -464,6 +514,8 @@
 	if (unregister_blkdev(COLINUX_MAJOR, "cobd"))
 		printk(KERN_WARNING "cobd: cannot unregister blkdev\n");
 
+	if (cobd_async_mode)
+		free_irq(BLOCKDEV_IRQ, NULL);
 	kfree(cobd_disks);
 }
 
@@ -514,6 +566,22 @@
 	cobd_drives_exit();
 }
 
+#ifndef MODULE
+
+static int __init cobd_setup (char *str)
+{
+	if (strcmp(str, "async") == 0) {
+		cobd_async_mode = 1;
+		printk(KERN_INFO "cobd: Enable asyncron mode\n");
+	}
+
+	return 1;
+}
+
+__setup ("setcobd=", cobd_setup);
+
+#endif /* !MODULE */
+
 module_init(cobd_init);
 module_exit(cobd_exit);
 
Index: linux-2.6.22-source/include/linux/cooperative.h
===================================================================
--- linux-2.6.22-source.orig/include/linux/cooperative.h
+++ linux-2.6.22-source/include/linux/cooperative.h
@@ -310,6 +310,7 @@
 	CO_BLOCK_WRITE,
 	CO_BLOCK_CLOSE,
 	CO_BLOCK_GET_ALIAS,
+	CO_BLOCK_ASYNC_OPEN,
 } co_block_request_type_t;
 
 typedef enum {
@@ -335,6 +336,7 @@
 			unsigned long long size;
 			unsigned long long disk_size;
 			vm_ptr_t address;
+			void * irq_request;
 		};
 		struct {
 			char alias[20];
@@ -343,6 +345,11 @@
 } __attribute__((packed)) co_block_request_t;
 
 typedef struct {
+	void * irq_request;
+	int uptodate;
+} __attribute__((packed)) co_block_intr_t;
+
+typedef struct {
 	co_network_request_type_t type;
 	unsigned int unit;
 	char mac_address[6];
Index: linux-2.6.22-source/kernel/cooperative.c
===================================================================
--- linux-2.6.22-source.orig/kernel/cooperative.c
+++ linux-2.6.22-source/kernel/cooperative.c
@@ -130,6 +130,7 @@
 #endif
 	case CO_DEVICE_SCSI: irq = SCSI_IRQ; break;
 	case CO_DEVICE_MOUSE: irq = MOUSE_IRQ; break;
+	case CO_DEVICE_BLOCK: irq = BLOCKDEV_IRQ; break;
 	default:
 		BUG_ON((unsigned long)message->device >= (unsigned long)CO_DEVICES_TOTAL);
 		co_free_message(node_message);
