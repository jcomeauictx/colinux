Various drivers


Index: linux-2.6.14-source/drivers/block/Kconfig
===================================================================
--- linux-2.6.14-source.orig/drivers/block/Kconfig
+++ linux-2.6.14-source/drivers/block/Kconfig
@@ -408,6 +408,15 @@
 	  "real" root file system, etc. See <file:Documentation/initrd.txt>
 	  for details.
 
+config BLK_DEV_COBD
+      tristate 'Cooperative block device support'
+      default y
+      depends on COOPERATIVE=y
+      help
+        Virtual block device support for cooperative kernels.
+
+        If unsure, say Y.
+
 
 #XXX - it makes sense to enable this only for 32-bit subarch's, not for x86_64
 #for instance.
Index: linux-2.6.14-source/drivers/block/Makefile
===================================================================
--- linux-2.6.14-source.orig/drivers/block/Makefile
+++ linux-2.6.14-source/drivers/block/Makefile
@@ -29,6 +29,7 @@
 obj-$(CONFIG_ATARI_SLM)		+= acsi_slm.o
 obj-$(CONFIG_AMIGA_Z2RAM)	+= z2ram.o
 obj-$(CONFIG_BLK_DEV_RAM)	+= rd.o
+obj-$(CONFIG_BLK_DEV_COBD)	+= cobd.o
 obj-$(CONFIG_BLK_DEV_LOOP)	+= loop.o
 obj-$(CONFIG_BLK_DEV_PS2)	+= ps2esdi.o
 obj-$(CONFIG_BLK_DEV_XD)	+= xd.o
Index: linux-2.6.14-source/drivers/block/cobd.c
===================================================================
--- /dev/null
+++ linux-2.6.14-source/drivers/block/cobd.c
@@ -0,0 +1,540 @@
+/*
+ *  Copyright (C) 2003 Dan Aloni <da-x@colinux.org>
+ *
+ *  Cooperative Linux Block Device implementation
+ */
+
+#include <linux/major.h>
+#include <linux/config.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/errno.h>
+#include <linux/major.h>
+#include <linux/stat.h>
+#include <linux/slab.h>
+#include <linux/bio.h>
+#include <linux/blkdev.h>
+#include <linux/cooperative_internal.h>
+#include <linux/file.h>
+#include <linux/ioctl.h>
+#include <linux/ctype.h>
+
+#include <asm/uaccess.h>
+#include <asm/types.h>
+
+#include <linux/devfs_fs_kernel.h>
+
+#define PBD_BLOCK_SIZE  512
+
+static int hardsect_size = 512;
+static int hardsect_size_shift = 9;
+static spinlock_t cobd_lock = SPIN_LOCK_UNLOCKED;
+static int cobd_max;
+
+struct cobd_device {
+	int unit;
+	int refcount;
+	struct block_device *device;
+};
+
+static int cobd_request(struct cobd_device *cobd, co_block_request_type_t type, co_block_request_t *out_request)
+{
+	co_block_request_t *request;
+	unsigned long flags;
+	long rc = 0;
+
+	co_passage_page_assert_valid();
+
+	co_passage_page_acquire(&flags);
+	co_passage_page->operation = CO_OPERATION_DEVICE;
+	co_passage_page->params[0] = CO_DEVICE_BLOCK;
+	co_passage_page->params[1] = cobd->unit;
+	request = (co_block_request_t *)&co_passage_page->params[2];
+	request->type = type;
+	request->rc = -1;
+	co_switch_wrapper();
+	rc = request->rc;
+	*out_request = *request;
+	co_passage_page_release(flags);
+
+	return rc;
+}
+
+static int cobd_stat(struct cobd_device *cobd, co_block_request_t *out_request)
+{
+	return cobd_request(cobd, CO_BLOCK_STAT, out_request);
+}
+
+static int cobd_get_alias(struct cobd_device *cobd, co_block_request_t *out_request)
+{
+	return cobd_request(cobd, CO_BLOCK_GET_ALIAS, out_request);
+}
+
+static int cobd_ioctl(struct inode * inode, struct file * file,
+		      unsigned int cmd, unsigned long arg)
+{
+	return -ENOTTY; /* unknown command */
+}
+
+static int cobd_open(struct inode *inode, struct file *file)
+{
+	struct cobd_device *cobd = (struct cobd_device *)(inode->i_bdev->bd_disk->private_data);
+	co_block_request_t *co_request;
+	co_block_request_t stat_request;
+	unsigned long flags;
+	int result;
+
+	if (cobd->device  &&  cobd->device != inode->i_bdev)
+		return -EBUSY;
+
+	if (cobd_stat(cobd, &stat_request))
+		return -ENODEV;
+
+	result = 0;
+
+	co_passage_page_assert_valid();
+
+	co_passage_page_acquire(&flags);
+	co_passage_page->operation = CO_OPERATION_DEVICE;
+	co_passage_page->params[0] = CO_DEVICE_BLOCK;
+	co_passage_page->params[1] = cobd->unit;
+	co_request = (co_block_request_t *)&co_passage_page->params[2];
+	co_request->type = CO_BLOCK_OPEN;
+	co_switch_wrapper();
+	if (co_request->rc)
+		result = -EIO;
+	else
+		cobd->refcount++;
+	co_passage_page_release(flags);
+
+	if (result)
+		return result;
+
+	if (cobd->refcount == 1) {
+		set_capacity(inode->i_bdev->bd_disk, stat_request.disk_size >> 9);
+		cobd->device = inode->i_bdev;
+	}
+
+	return 0;
+}
+
+static int cobd_release(struct inode *inode, struct file *file)
+{
+	struct cobd_device *cobd = (struct cobd_device *)(inode->i_bdev->bd_disk->private_data);
+	co_block_request_t *co_request;
+	unsigned long flags;
+	int ret = 0;
+
+	co_passage_page_assert_valid();
+
+	co_passage_page_acquire(&flags);
+	co_passage_page->operation = CO_OPERATION_DEVICE;
+	co_passage_page->params[0] = CO_DEVICE_BLOCK;
+	co_passage_page->params[1] = cobd->unit;
+	co_request = (co_block_request_t *)&co_passage_page->params[2];
+	co_request->type = CO_BLOCK_CLOSE;
+	co_switch_wrapper();
+	if (co_request->rc)
+		ret = -EIO;
+	cobd->refcount--;
+	co_passage_page_release(flags);
+
+	if (cobd->refcount == 0)
+		cobd->device = NULL;
+
+	return ret;
+}
+
+/*
+ * Handle an I/O request.
+ */
+static int cobd_transfer(struct cobd_device *cobd, unsigned long sector,
+			 unsigned long nsect, char *buffer, int write)
+{
+	co_block_request_t *co_request;
+	unsigned long flags;
+	int ret = 0;
+
+	co_passage_page_assert_valid();
+
+	co_passage_page_acquire(&flags);
+	co_passage_page->operation = CO_OPERATION_DEVICE;
+	co_passage_page->params[0] = CO_DEVICE_BLOCK;
+	co_passage_page->params[1] = cobd->unit;
+	co_request = (co_block_request_t *)&co_passage_page->params[2];
+	if (!write)
+		co_request->type = CO_BLOCK_READ;
+	else
+		co_request->type = CO_BLOCK_WRITE;
+	co_request->offset = ((unsigned long long)sector) << hardsect_size_shift;
+	co_request->size = nsect << hardsect_size_shift;
+	co_request->address = buffer;
+	co_request->rc = 0;
+	co_switch_wrapper();
+
+	if (!co_request->rc)
+		ret = 1;
+
+	co_passage_page_release(flags);
+	return ret;
+}
+
+static void do_cobd_request(request_queue_t *q)
+{
+        struct request *req;
+	struct cobd_device *cobd;
+
+        while ((req = elv_next_request(q)) != NULL) {
+		int ret;
+
+		if (!blk_fs_request(req)) {
+			end_request(req, 0);
+			continue;
+		}
+		cobd = (struct cobd_device *)(req->rq_disk->private_data);
+
+		ret = cobd_transfer(cobd, req->sector, req->current_nr_sectors,
+				    req->buffer, rq_data_dir(req));
+		end_request(req, ret);
+        }
+}
+
+static struct block_device_operations cobd_fops = {
+	.owner   = THIS_MODULE,
+	.open    = cobd_open,
+	.release = cobd_release,
+	.ioctl   = cobd_ioctl,
+};
+
+static struct gendisk **cobd_disks;
+
+static struct cobd_device cobd_devs[CO_MODULE_MAX_COBD];
+
+static int __init cobd_drives_init(void)
+{
+	int result, i;
+
+	if (register_blkdev(COLINUX_MAJOR, "cobd")) {
+		printk(KERN_WARNING "Unable to get major number %d for cobd device\n", COLINUX_MAJOR);
+		return -EIO;
+	}
+
+	cobd_max = CO_MODULE_MAX_COBD;
+
+	result = -ENOMEM; /* for the possible errors */
+
+	cobd_disks = kmalloc(cobd_max * sizeof(struct gendisk *), GFP_KERNEL);
+	if (!cobd_disks)
+		goto fail_malloc;
+
+	for (i=0; i < cobd_max; i++) {
+		cobd_disks[i] = alloc_disk(1);
+		if (!cobd_disks[i])
+			goto fail_malloc3;
+	}
+
+	for (i=0; i < cobd_max; i++) {
+		struct cobd_device *cobd = &cobd_devs[i];
+		struct gendisk *disk = cobd_disks[i];
+
+		disk->queue = blk_init_queue(do_cobd_request, &cobd_lock);
+		if (!disk->queue)
+			goto fail_malloc4;
+
+		blk_queue_hardsect_size(disk->queue, hardsect_size);
+
+		cobd->unit = i;
+		disk->major = COLINUX_MAJOR;
+		disk->first_minor = i;
+		disk->fops = &cobd_fops;
+		sprintf(disk->disk_name, "cobd%d", i);
+		sprintf(disk->devfs_name, "cobd/%d", i);
+		disk->private_data = cobd;
+	}
+
+	devfs_mk_dir("cobd");
+
+	for (i=0; i < cobd_max; i++)
+		add_disk(cobd_disks[i]);
+
+	printk(KERN_INFO "cobd: loaded (max %d devices)\n", cobd_max);
+	return 0;
+
+/* error path */
+fail_malloc4:
+	while (i--)
+		blk_cleanup_queue(cobd_disks[i]->queue);
+	devfs_remove("cobd");
+	i = cobd_max;
+
+fail_malloc3:
+	while (i--)
+		if (cobd_disks[i] != NULL)
+			put_disk(cobd_disks[i]);
+
+	kfree(cobd_disks);
+
+fail_malloc:
+	if (unregister_blkdev(COLINUX_MAJOR, "cobd"))
+		printk(KERN_WARNING "cobd: cannot unregister blkdev\n");
+
+	return result;
+}
+
+struct cobd_alias_major {
+	const char *name;
+	int registered;
+	int number;
+};
+
+struct cobd_alias {
+	const char *name;
+	struct cobd_alias_major *major;
+	int minor_start;
+	int minor_count;
+	struct gendisk **gendisk;
+};
+
+struct cobd_alias_major cobd_aliases_major_ide0 = {
+	.name = "ide0",
+	.number = IDE0_MAJOR,
+};
+
+struct cobd_alias_major cobd_aliases_major_ide1 = {
+	.name = "ide1",
+	.number = IDE1_MAJOR,
+};
+
+struct cobd_alias_major cobd_aliases_major_ide2 = {
+	.name = "ide2",
+	.number = IDE2_MAJOR,
+};
+
+struct cobd_alias_major cobd_aliases_major_ide3 = {
+	.name = "ide3",
+	.number = IDE3_MAJOR,
+};
+
+struct cobd_alias_major cobd_aliases_major_sd = {
+	.name = "sd",
+	.number = SCSI_DISK0_MAJOR,
+};
+
+struct cobd_alias cobd_aliases[] = {
+	{"hda", &cobd_aliases_major_ide0, 0x00, 21, },
+	{"hdb", &cobd_aliases_major_ide0, 0x40, 21, },
+	{"hdc", &cobd_aliases_major_ide1, 0x00, 21, },
+	{"hdd", &cobd_aliases_major_ide1, 0x40, 21, },
+	{"hde", &cobd_aliases_major_ide2, 0x00, 21, },
+	{"hdf", &cobd_aliases_major_ide2, 0x40, 21, },
+	{"hdg", &cobd_aliases_major_ide3, 0x00, 21, },
+	{"hdh", &cobd_aliases_major_ide3, 0x40, 21, },
+	{"sda", &cobd_aliases_major_sd, 0x00, 0x10, },
+	{"sdb", &cobd_aliases_major_sd, 0x10, 0x10, },
+	{"sdc", &cobd_aliases_major_sd, 0x20, 0x10, },
+	{"sdd", &cobd_aliases_major_sd, 0x30, 0x10, },
+	{"sde", &cobd_aliases_major_sd, 0x40, 0x10, },
+	{"sdf", &cobd_aliases_major_sd, 0x50, 0x10, },
+	{"sdg", &cobd_aliases_major_sd, 0x60, 0x10, },
+	{"sdh", &cobd_aliases_major_sd, 0x70, 0x10, },
+	{"sdi", &cobd_aliases_major_sd, 0x80, 0x10, },
+	{"sdj", &cobd_aliases_major_sd, 0x90, 0x10, },
+	{"sdk", &cobd_aliases_major_sd, 0xa0, 0x10, },
+	{"sdl", &cobd_aliases_major_sd, 0xb0, 0x10, },
+	{"sdm", &cobd_aliases_major_sd, 0xc0, 0x10, },
+	{"sdn", &cobd_aliases_major_sd, 0xd0, 0x10, },
+	{"sdo", &cobd_aliases_major_sd, 0xe0, 0x10, },
+	{"sdp", &cobd_aliases_major_sd, 0xf0, 0x10, },
+	{NULL, },
+};
+
+static int __init skip_atoi(const char **s)
+{
+	/* lib/spprintf.h */
+
+        int i=0;
+
+        while (isdigit(**s))
+                i = i*10 + *((*s)++) - '0';
+
+        return i;
+}
+
+static int __init cobd_spawn_alias(struct cobd_alias *alias,
+				   const char *alias_name_requested,
+				   int cobd_unit)
+{
+	const char *index_str_start = &alias_name_requested[strlen(alias->name)];
+	const char *index_str_end = index_str_start;
+	struct cobd_device *cobd;
+	struct gendisk *disk;
+
+	int index = skip_atoi(&index_str_end);
+
+	if (!((index >= 0) && (index <= alias->minor_count))) {
+		printk(KERN_WARNING "index out of bounds for alias %s (1 - %d)\n",
+		       alias_name_requested, alias->minor_count);
+		return -1;
+	}
+
+	if (alias->gendisk == NULL) {
+		static struct gendisk **gendisks;
+		gendisks = kmalloc(alias->minor_count * sizeof(struct gendisk *), GFP_KERNEL);
+		memset(gendisks, 0, alias->minor_count * sizeof(struct gendisk *));
+
+		if (!gendisks) {
+			printk(KERN_WARNING "cannot allocate gendisk array for %s\n", alias->name);
+			return -ENOMEM;
+		}
+
+		if (!alias->major->registered) {
+			if (register_blkdev(alias->major->number, alias->major->name)) {
+				printk(KERN_WARNING "unable to get major number %d for cobd alias device %s\n",
+				       alias->major->number, alias_name_requested);
+				kfree(gendisks);
+				return -EIO;
+			}
+
+			alias->major->registered = 1;
+		}
+
+		alias->gendisk = gendisks;
+		devfs_mk_dir(alias->name);
+	}
+
+	if (alias->gendisk[index] != NULL) {
+		printk(KERN_WARNING "alias %s already used\n", alias_name_requested);
+		return -1;
+	}
+
+	disk = alloc_disk(1);
+	if (!disk) {
+		printk(KERN_WARNING "cannot allocate disk for alias %s\n", alias_name_requested);
+		return -1;
+	}
+
+	disk->queue = blk_init_queue(do_cobd_request, &cobd_lock);
+	if (!disk->queue) {
+		printk(KERN_WARNING "cannot allocate init queue for alias %s\n", alias_name_requested);
+		put_disk(disk);
+		return -1;
+	}
+
+	cobd = &cobd_devs[cobd_unit];
+	blk_queue_hardsect_size(disk->queue, hardsect_size);
+	disk->major = alias->major->number;
+	disk->first_minor = alias->minor_start + index;
+	disk->fops = &cobd_fops;
+	if (index)
+		sprintf(disk->disk_name, "%s%d", alias->name, index);
+	else
+		sprintf(disk->disk_name, "%s", alias->name);
+	sprintf(disk->devfs_name, "%s/%d", alias->name, index);
+	disk->private_data = cobd;
+	add_disk(disk);
+	alias->gendisk[index] = disk;
+
+	printk("cobd alias cobd%d -> %s created\n", cobd_unit, alias_name_requested);
+
+	return 0;
+}
+
+static int __init cobd_aliases_init(void)
+{
+	int unit;
+	co_block_request_t request;
+
+	for (unit=0; unit < cobd_max; unit++) {
+		int result = cobd_get_alias(&cobd_devs[unit], &request);
+		if (result)
+			continue;
+
+		printk("alias for cobd%d is %s\n", unit, request.alias);
+
+		struct cobd_alias *alias = &cobd_aliases[0];
+		while (alias->name) {
+			const char *match = (strstr(request.alias, alias->name));
+			if (match == request.alias) {
+				cobd_spawn_alias(alias, request.alias, unit);
+				break;
+			}
+			alias++;
+		}
+
+		if (alias->name == NULL)
+			printk("alias %s is unknown (see cobd_aliases in cobd.c)\n", request.alias);
+	}
+
+	return 0;
+}
+
+static void cobd_drives_exit(void)
+{
+	int i;
+
+	for (i = 0; i < cobd_max; i++) {
+		blk_cleanup_queue(cobd_disks[i]->queue);
+		del_gendisk(cobd_disks[i]);
+		put_disk(cobd_disks[i]);
+	}
+
+	devfs_remove("cobd");
+	if (unregister_blkdev(COLINUX_MAJOR, "cobd"))
+		printk(KERN_WARNING "cobd: cannot unregister blkdev\n");
+
+	kfree(cobd_disks);
+}
+
+static void cobd_aliases_exit(void)
+{
+	struct cobd_alias *alias = &cobd_aliases[0];
+	while (alias->name != NULL) {
+		if (alias->gendisk == NULL) {
+			alias++;
+			continue;
+		}
+
+		int index;
+		for (index=0; index < alias->minor_count; index++) {
+			struct gendisk *disk = alias->gendisk[index];
+			if (!disk)
+				return;
+
+			blk_cleanup_queue(disk->queue);
+			del_gendisk(disk);
+			put_disk(disk);
+		}
+
+		devfs_remove(alias->name);
+		if (!alias->major->registered) {
+			unregister_blkdev(alias->major->number, alias->major->name);
+			alias->major->registered = 0;
+		}
+		kfree(alias->gendisk);
+
+		alias++;
+	}
+}
+
+static int __init cobd_init(void)
+{
+	int result = cobd_drives_init();
+	if (result)
+		return result;
+
+	cobd_aliases_init();
+
+	return result;
+}
+
+static void cobd_exit(void)
+{
+	cobd_aliases_exit();
+	cobd_drives_exit();
+}
+
+module_init(cobd_init);
+module_exit(cobd_exit);
+
+
Index: linux-2.6.14-source/drivers/char/mem.c
===================================================================
--- linux-2.6.14-source.orig/drivers/char/mem.c
+++ linux-2.6.14-source/drivers/char/mem.c
@@ -25,6 +25,7 @@
 #include <linux/device.h>
 #include <linux/highmem.h>
 #include <linux/crash_dump.h>
+#include <linux/cooperative_internal.h>
 #include <linux/backing-dev.h>
 #include <linux/bootmem.h>
 
@@ -114,6 +115,11 @@
 	ssize_t read, sz;
 	char *ptr;
 
+	if (cooperative_mode_enabled()) {
+		/* Reading kmem is bad news in cooperative */
+		return -ENOMEM;
+	}
+
 	if (!valid_phys_addr_range(p, &count))
 		return -EFAULT;
 	read = 0;
@@ -172,6 +178,11 @@
 	unsigned long copied;
 	void *ptr;
 
+	if (cooperative_mode_enabled()) {
+		/* Writing kmem is bad news in cooperative */
+		return -ENOMEM;
+	}
+
 	if (!valid_phys_addr_range(p, &count))
 		return -EFAULT;
 
@@ -323,6 +334,11 @@
 	ssize_t low_count, read, sz;
 	char * kbuf; /* k-addr because vread() takes vmlist_lock rwlock */
 
+	if (cooperative_mode_enabled()) {
+		/* Reading kmem is bad news in cooperative */
+		return -ENOMEM;
+	}
+
 	read = 0;
 	if (p < (unsigned long) high_memory) {
 		low_count = count;
@@ -474,6 +490,11 @@
 	ssize_t written;
 	char * kbuf; /* k-addr because vwrite() takes vmlist_lock rwlock */
 
+	if (cooperative_mode_enabled()) {
+		/* Writing kmem is bad news in cooperative */
+		return -ENOMEM;
+	}
+
 	if (p < (unsigned long) high_memory) {
 
 		wrote = count;
Index: linux-2.6.14-source/drivers/input/keyboard/Kconfig
===================================================================
--- linux-2.6.14-source.orig/drivers/input/keyboard/Kconfig
+++ linux-2.6.14-source/drivers/input/keyboard/Kconfig
@@ -16,8 +16,8 @@
 	tristate "AT keyboard" if !PC
 	default y
 	select SERIO
-	select SERIO_LIBPS2
-	select SERIO_I8042 if PC
+ 	select SERIO_LIBPS2
+	select SERIO_I8042 if PC && !COOPERATIVE
 	select SERIO_GSCPS2 if GSC
 	help
 	  Say Y here if you want to use a standard AT or PS/2 keyboard. Usually
Index: linux-2.6.14-source/drivers/input/keyboard/atkbd.c
===================================================================
--- linux-2.6.14-source.orig/drivers/input/keyboard/atkbd.c
+++ linux-2.6.14-source/drivers/input/keyboard/atkbd.c
@@ -27,6 +27,7 @@
 #include <linux/serio.h>
 #include <linux/workqueue.h>
 #include <linux/libps2.h>
+#include <linux/cooperative_internal.h>
 
 #define DRIVER_DESC	"AT and PS/2 keyboard driver"
 
@@ -517,6 +518,9 @@
 	struct ps2dev *ps2dev = &atkbd->ps2dev;
 	unsigned char param[2];
 
+	if (cooperative_mode_enabled())
+		return 0;
+
 /*
  * Some systems, where the bit-twiddling when testing the io-lines of the
  * controller may confuse the keyboard need a full reset of the keyboard. On
Index: linux-2.6.14-source/drivers/input/mouse/Kconfig
===================================================================
--- linux-2.6.14-source.orig/drivers/input/mouse/Kconfig
+++ linux-2.6.14-source/drivers/input/mouse/Kconfig
@@ -15,6 +15,7 @@
 config MOUSE_PS2
 	tristate "PS/2 mouse"
 	default y
+	depends on !COOPERATIVE
 	select SERIO
 	select SERIO_LIBPS2
 	select SERIO_I8042 if PC
@@ -37,8 +38,21 @@
 	  To compile this driver as a module, choose M here: the
 	  module will be called psmouse.
 
+config MOUSE_COOPERATIVE
+	tristate "Cooperative Mouse driver"
+       	default y
+        depends on COOPERATIVE
+        ---help---
+          Virtual mouse driver for cooperative kernels.
+
+          If unsure, say Y.
+
+          To compile this driver as a module, choose M here: the
+          module will be called psmouse.
+
 config MOUSE_SERIAL
 	tristate "Serial mouse"
+	depends on !COOPERATIVE
 	select SERIO
 	---help---
 	  Say Y here if you have a serial (RS-232, COM port) mouse connected
@@ -52,7 +66,7 @@
 
 config MOUSE_INPORT
 	tristate "InPort/MS/ATIXL busmouse"
-	depends on ISA
+	depends on ISA && !COOPERATIVE
 	help
 	  Say Y here if you have an InPort, Microsoft or ATI XL busmouse.
 	  They are rather rare these days.
@@ -62,13 +76,13 @@
 
 config MOUSE_ATIXL
 	bool "ATI XL variant"
-	depends on MOUSE_INPORT
+	depends on MOUSE_INPORT && !COOPERATIVE
 	help
 	  Say Y here if your mouse is of the ATI XL variety.
 
 config MOUSE_LOGIBM
 	tristate "Logitech busmouse"
-	depends on ISA
+	depends on ISA && !COOPERATIVE
 	help
 	  Say Y here if you have a Logitech busmouse.
 	  They are rather rare these days.
@@ -78,7 +92,7 @@
 
 config MOUSE_PC110PAD
 	tristate "IBM PC110 touchpad"
-	depends on ISA
+	depends on ISA && !COOPERATIVE
 	help
 	  Say Y if you have the IBM PC-110 micro-notebook and want its
 	  touchpad supported.
@@ -88,7 +102,7 @@
 
 config MOUSE_MAPLE
 	tristate "Maple bus mouse"
-	depends on SH_DREAMCAST && MAPLE
+	depends on SH_DREAMCAST && MAPLE && !COOPERATIVE
 	help
 	  Say Y if you have a DreamCast console and a mouse attached to
 	  its Maple bus.
@@ -98,7 +112,7 @@
 
 config MOUSE_AMIGA
 	tristate "Amiga mouse"
-	depends on AMIGA
+	depends on AMIGA && !COOPERATIVE
 	help
 	  Say Y here if you have an Amiga and want its native mouse
 	  supported by the kernel.
@@ -108,7 +122,7 @@
 
 config MOUSE_RISCPC
 	tristate "Acorn RiscPC mouse"
-	depends on ARCH_ACORN
+	depends on ARCH_ACORN && !COOPERATIVE
 	help
 	  Say Y here if you have the Acorn RiscPC computer and want its
 	  native mouse supported.
@@ -118,6 +132,7 @@
 
 config MOUSE_VSXXXAA
 	tristate "DEC VSXXX-AA/GA mouse and VSXXX-AB tablet"
+	depends on !COOPERATIVE
 	select SERIO
 	help
 	  Say Y (or M) if you want to use a DEC VSXXX-AA (hockey
@@ -129,10 +144,9 @@
 
 config MOUSE_HIL
 	tristate "HIL pointers (mice etc)."     
-	depends on GSC
+	depends on GSC && !COOPERATIVE
 	select HP_SDC
 	select HIL_MLC
 	help
 	  Say Y here to support HIL pointers.
-
 endif
Index: linux-2.6.14-source/drivers/input/mouse/Makefile
===================================================================
--- linux-2.6.14-source.orig/drivers/input/mouse/Makefile
+++ linux-2.6.14-source/drivers/input/mouse/Makefile
@@ -11,6 +11,7 @@
 obj-$(CONFIG_MOUSE_MAPLE)	+= maplemouse.o
 obj-$(CONFIG_MOUSE_PC110PAD)	+= pc110pad.o
 obj-$(CONFIG_MOUSE_PS2)		+= psmouse.o
+obj-$(CONFIG_MOUSE_COOPERATIVE)	+= comouse.o
 obj-$(CONFIG_MOUSE_SERIAL)	+= sermouse.o
 obj-$(CONFIG_MOUSE_HIL)		+= hil_ptr.o
 obj-$(CONFIG_MOUSE_VSXXXAA)	+= vsxxxaa.o
Index: linux-2.6.14-source/drivers/input/mouse/comouse.c
===================================================================
--- /dev/null
+++ linux-2.6.14-source/drivers/input/mouse/comouse.c
@@ -0,0 +1,74 @@
+/*
+ * Virtual mouse driver for Linux
+ *
+ * Skeleton based on:
+ *  $Id: comouse.c,v 1.1.6.1 2005/07/15 08:19:48 tamura Exp $
+ *
+ *  Copyright (c) 1999-2001 Vojtech Pavlik
+ *
+ * Copyright (c) 2004 Dan Aloni
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/interrupt.h>
+#include <linux/input.h>
+#include <linux/config.h>
+#include <linux/serio.h>
+#include <linux/init.h>
+
+MODULE_AUTHOR("Dan Aloni <da-x@colinux.org>");
+MODULE_DESCRIPTION("Virtual mouse driver");
+MODULE_LICENSE("GPL");
+
+/*
+ * comouse_interrupt() handles incoming characters, either gathering them into
+ * packets or passing them to the command routine as command output.
+ */
+
+static irqreturn_t comouse_interrupt(struct serio *serio,
+				     unsigned char data, unsigned int flags, struct pt_regs *regs)
+{
+	return IRQ_HANDLED;
+}
+
+/*
+ * comouse_disconnect() cleans up after we don't want talk
+ * to the mouse anymore.
+ */
+
+static void comouse_disconnect(struct serio *serio)
+{
+}
+
+/*
+ * comouse_connect() is a callback form the serio module when
+ * an unhandled serio port is found.
+ */
+
+static void comouse_connect(struct serio *serio, struct serio_driver *dev)
+{
+}
+
+static struct serio_driver comouse_dev = {
+	.interrupt =	comouse_interrupt,
+	.connect =	comouse_connect,
+	.disconnect =	comouse_disconnect,
+	.driver		= {
+		.name	= "comouse",
+	},
+};
+
+int __init comouse_init(void)
+{
+	serio_register_driver(&comouse_dev);
+	return 0;
+}
+
+void __exit comouse_exit(void)
+{
+	serio_unregister_driver(&comouse_dev);
+}
+
+module_init(comouse_init);
+module_exit(comouse_exit);
Index: linux-2.6.14-source/drivers/input/serio/Kconfig
===================================================================
--- linux-2.6.14-source.orig/drivers/input/serio/Kconfig
+++ linux-2.6.14-source/drivers/input/serio/Kconfig
@@ -21,7 +21,7 @@
 config SERIO_I8042
 	tristate "i8042 PC Keyboard controller" if EMBEDDED || !X86
 	default y
-	depends on !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K
+	depends on !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !COOPERATIVE
 	---help---
 	  i8042 is the chip over which the standard AT keyboard and PS/2
 	  mouse are connected to the computer. If you use these devices,
@@ -180,4 +180,9 @@
 	  To compile this driver as a module, choose M here: the
 	  module will be called serio_raw.
 
+config SERIO_COKBD
+ 	tristate "Cooperative Linux virtual keyboard controller driver"
+ 	depends on COOPERATIVE
+ 	default y
+
 endif
Index: linux-2.6.14-source/drivers/input/serio/Makefile
===================================================================
--- linux-2.6.14-source.orig/drivers/input/serio/Makefile
+++ linux-2.6.14-source/drivers/input/serio/Makefile
@@ -21,3 +21,4 @@
 obj-$(CONFIG_SERIO_MACEPS2)	+= maceps2.o
 obj-$(CONFIG_SERIO_LIBPS2)	+= libps2.o
 obj-$(CONFIG_SERIO_RAW)		+= serio_raw.o
+obj-$(CONFIG_SERIO_COKBD)	+= cokbd.o
\ No newline at end of file
Index: linux-2.6.14-source/drivers/input/serio/cokbd.c
===================================================================
--- /dev/null
+++ linux-2.6.14-source/drivers/input/serio/cokbd.c
@@ -0,0 +1,155 @@
+/*
+ *  Cooperative Linux virtual keyboard controller driver
+ *
+ *  Copyright (c) 1999-2002 Dan Aloni <da-x@colinux.org)
+ *    Based on 98kbd-io.c written by Osamu Tomita>
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ */
+
+#include <linux/config.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/ioport.h>
+#include <linux/init.h>
+#include <linux/serio.h>
+#include <linux/sched.h>
+#include <linux/cooperative_internal.h>
+
+#include <asm/io.h>
+
+MODULE_AUTHOR("Dan Aloni <da-x@colinux.org>");
+MODULE_DESCRIPTION("Cooperative Linux virtual keyboard controller driver");
+MODULE_LICENSE("GPL");
+
+/*
+ * Names.
+ */
+
+#define COKBD_PHYS_DESC        "cokbd"
+
+static struct serio cokbd_port;
+
+static irqreturn_t cokbdio_interrupt(int irq, void *dev_id, struct pt_regs *regs);
+
+/*
+ * cokbd_flush() flushes all data that may be in the keyboard buffers
+ */
+
+static int cokbd_flush(void)
+{
+#if (0)
+	co_linux_message_t *message;
+
+	while (co_get_message(&message, CO_DEVICE_KEYBOARD)) {
+		co_free_message(message);
+	}
+#endif
+	return 0;
+}
+
+/*
+ * cokbd_write() sends a byte out through the keyboard interface.
+ */
+
+#define ATKBD_CMD_GETID		0x02f2
+
+static void cokbd_receive(struct serio *port, unsigned char c)
+{
+	struct pt_regs regs= {0, };
+
+	serio_interrupt(port, c, 0, &regs);
+}
+
+static int cokbd_write(struct serio *port, unsigned char c)
+{
+	return 0;
+}
+
+/*
+ * cokbd_open() is called when a port is open by the higher layer.
+ * It allocates the interrupt and enables in in the chip.
+ */
+
+static int cokbd_open(struct serio *port)
+{
+	cokbd_flush();
+
+	if (request_irq(KEYBOARD_IRQ, cokbdio_interrupt, 0, "cokbd", NULL)) {
+		printk(KERN_ERR "cobkd.c: Can't get irq %d for %s, unregistering the port.\n", KEYBOARD_IRQ, "KBD");
+		serio_unregister_port(port);
+		return -1;
+	}
+
+	return 0;
+}
+
+static void cokbd_close(struct serio *port)
+{
+	printk(KERN_INFO "cokbd closed\n");
+
+	free_irq(KEYBOARD_IRQ, NULL);
+
+	cokbd_flush();
+}
+
+/*
+ * Structures for registering the devices in the serio.c module.
+ */
+
+static struct serio cokbd_port =
+{
+	.id.type =	SERIO_8042_XL,
+	.write =	cokbd_write,
+	.open =		cokbd_open,
+	.close =	cokbd_close,
+	.name =		"cokbd port",
+	.phys =		COKBD_PHYS_DESC,
+};
+
+/*
+ * cokbdio_interrupt() is the most important function in this driver -
+ * it handles the interrupts from keyboard, and sends incoming bytes
+ * to the upper layers.
+ */
+
+static irqreturn_t cokbdio_interrupt(int irq, void *dev_id, struct pt_regs *regs)
+{
+	co_message_node_t *node_message;
+	while (co_get_message(&node_message, CO_DEVICE_KEYBOARD)) {
+		co_linux_message_t *message = (co_linux_message_t *)&node_message->msg.data;
+		co_scan_code_t *sc = (co_scan_code_t *)message->data;
+		unsigned long scancode = sc->code;
+
+		if (!sc->down)
+			scancode |= 0x80;
+
+		cokbd_receive(&cokbd_port, scancode);
+
+		co_free_message(node_message);
+	}
+
+	return IRQ_HANDLED;
+}
+
+int __init cokbdio_init(void)
+{
+	serio_register_port(&cokbd_port);
+
+	printk(KERN_INFO "serio: cokbd at irq %d\n", KEYBOARD_IRQ);
+
+	return 0;
+}
+
+void __exit cokbdio_exit(void)
+{
+	serio_unregister_port(&cokbd_port);
+}
+
+module_init(cokbdio_init);
+module_exit(cokbdio_exit);
