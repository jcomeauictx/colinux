Index: linux-2.6.22-source/drivers/video/covideo.c
===================================================================
--- /dev/null
+++ linux-2.6.22-source/drivers/video/covideo.c
@@ -0,0 +1,149 @@
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/fb.h>
+
+#include <linux/cooperative.h>
+#include <linux/cooperative_internal.h>
+#include <linux/cooperative_pci.h>
+
+//#include <linux/covideo.h>
+
+MODULE_AUTHOR("Steve Shoecraft <sshoecraft@earthlink.net>");
+MODULE_DESCRIPTION("Cooperative Linux Video Driver");
+MODULE_LICENSE("GPL");
+
+#define COVIDEO_DEBUG 1
+
+/* Our info */
+typedef struct {
+	struct pci_dev *pdev;
+} covideo_info_t;
+
+/* Frame buffer operations */
+static struct fb_ops covideo_ops = {
+	.owner		= THIS_MODULE,
+#if 0
+        .fb_open        = covideo_open,
+        .fb_release     = covideo_release,
+        .fb_read        = fb_sys_read,
+        .fb_write       = fb_sys_write,
+        .fb_check_var   = covideo_check_var,
+        .fb_set_par     = covideo_set_par,
+        .fb_setcolreg   = covideo_setcolreg,
+	.fb_setcmap	= covideo_setcmap,
+        .fb_blank       = covideo_blank,
+        .fb_pan_display = covideo_pan_display,
+        .fb_fillrect    = sys_fillrect,
+        .fb_copyarea    = sys_copyarea,
+        .fb_imageblit   = sys_imageblit,
+	.fb_cursor	= covideo_cursor,
+	.fb_rotate 	= covideo_rotate,
+        .fb_mmap        = covideo_mmap,
+        .fb_get_caps    = svga_get_caps,
+#endif
+};
+
+/*
+ * PCI Probe - probe for a single device
+*/
+static int __devinit covideo_pci_probe( struct pci_dev *pdev, const struct pci_device_id *id )
+{
+        struct fb_info *info;
+        struct covideo_info *par;
+        int rc;
+
+#if COVIDEO_DEBUG
+	printk(KERN_INFO "covideo_pci_probe: adding fb...\n");
+#endif
+
+        /* Allocate and fill driver data structure */
+        info = framebuffer_alloc(sizeof(covideo_info_t), NULL);
+        if (! info) {
+                dev_err(&(pdev->dev), "cannot allocate memory\n");
+                return -ENOMEM;
+        }
+
+	par = info->par;
+//	mutex_init(&par->open_lock);
+
+        info->flags = FBINFO_PARTIAL_PAN_OK | FBINFO_HWACCEL_YPAN;
+        info->fbops = &covideo_ops;
+
+        rc = pci_enable_device(pdev);
+        if (rc < 0) {
+                dev_err(&(pdev->dev), "cannot enable PCI device\n");
+		return -EINVAL;
+ //               goto err_enable_device;
+        }
+
+        rc = pci_request_regions(pdev, "covideo");
+        if (rc < 0) {
+                dev_err(&(pdev->dev), "cannot reserve framebuffer region\n");
+		return -EINVAL;
+//                goto err_request_regions;
+        }
+
+        info->fix.smem_start = pci_resource_start(pdev, 0);
+        info->fix.smem_len = pci_resource_len(pdev, 0);
+#if 0
+        info->fix.mmio_start = pci_resource_start(pdev, 1);
+        info->fix.mmio_len = pci_resource_len(pdev, 1);
+#endif
+
+
+#if 0
+	rc = request_irq(VIDEO_IRQ, &covideo_isr, IRQF_SAMPLE_RANDOM, "covideo", NULL);
+	if (rc) {
+		printk(KERN_ERR "covideo_pci_init: unable to get irq %d", VIDEO_IRQ);
+		return rc;
+	}
+#endif
+	return -EINVAL;
+}
+
+
+/*
+ * PCI Remove - hotplug removal
+*/
+static void __devexit covideo_pci_remove(struct pci_dev *pdev)
+{
+	pci_set_drvdata(pdev, NULL);
+}
+
+static struct pci_device_id covideo_pci_ids[] __devinitdata = {
+	{ PCI_DEVICE(PCI_VENDOR_ID_CO, PCI_DEVICE_ID_COFB) },
+	{ 0 }
+};
+
+static struct pci_driver covideo_pci_driver = {
+	.name		= "covideo",
+	.id_table	= covideo_pci_ids,
+	.probe		= covideo_pci_probe,
+	.remove		= __devexit_p(covideo_pci_remove),
+};
+
+extern int coio_test(void);
+
+/*
+ * PCI Init - module load
+*/
+static int __init covideo_pci_init(void) {
+#if COVIDEO_DEBUG
+	printk(KERN_INFO "covideo_pci_init: registering...\n");
+#endif
+	return pci_register_driver(&covideo_pci_driver);
+}
+
+/*
+ * PCI Exit - module unload
+*/
+static void __exit covideo_pci_exit(void) {
+#if COVIDEO_DEBUG
+	printk(KERN_INFO "covideo_pci_exit: exiting\n");
+#endif
+        pci_unregister_driver(&covideo_pci_driver);
+}
+
+module_init(covideo_pci_init);
+module_exit(covideo_pci_exit);
