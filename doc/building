Building Cooperative Linux            Dan Aloni, da-x@colinux.org
=================================================================

Table of Contents

  1. Prerequisites
  2. Cooperative Linux kernel (the vmlinux file)
  3. Host Operating system support code, i.e, the daemon, console, 
     and kernel driver

=================================================================

1. Prerequisites
----------------

When compiling coLinux to run on Linux of the same architecture,
only one compiler can to be used.

For cross compiling, the components that comprise coLinux need 
to be compiled using 2 differently targeted versions of GCC 
(http://gcc.gnu.org). One gcc is required for the native Linux 
architecture that coLinux designed to run on (e.g, i686-pc-linux), 
and the other version is used to compiled binary executables and 
drivers for the host OS (e.g, i686-pc-mingw32).

The versions of the two compilers need to match as closely as 
possible. Versions 2.95.x, 3.1.x, 3.2.x and 3.3.x of gcc are 
not guaranteed to be ABI-compatible.


2. Compiling the Cooperative Linux kernel
-----------------------------------------

Unpack the source tarball of coLinux and the Linux kernel tarball 
(version 2.4.24, can be obtained from www.kernel.org) in the same 
directory. Make sure that the directory of the Linux kernel is 
named 'linux'. 

Apply the patch found in the ./patch directory of the Cooperative 
Linux tarball, to the Linux kernel. If conflicts arrise, then it is
possible that there is a mismatch between the version of the kernel 
a the version that patch if designed to apply to.

For example: 
    ~/linux-2.6.7# patch -p1 < ../colinux/patch/linux

The coLinux package is supplied with a premaid Linux kernel 
configuration file. Copy it to your Linux tree:

    ~/linux-2.6.7# cp ../colinux/conf/linux-config .config

And then, to build vmlinux:
    ~/linux-2.6.7# make oldconfig
    ~/linux-2.6.7# make vmlinux 


3. Compiling the OS support code 
--------------------------------

Compiling the operating system dependent support code is a little more
complex. The current build system assumes a cross compiler toolchain is 
installed for that purpose. 

Please read the cygwin-cross-build for 
instructions concerning the creation of such toolchain.

3.1. Build Dependencies

The coLinux daemon depends on:
  * mxml

The coLinux console depends on:
  * FLTK (major version 1)


3.2. For Microsoft Windows as host

[TBD...]

3.2.1 Complete download and building for Win32 under Linux (mingw32)

To compile source for windows targed, the compiler must self compiled
for this target. You can not download a binary of this compiler!

Creat a new directory, extract colinux source in this directory, make scripts
executable and ran the download-script in "bin" directory.

    mkdir /home/$USER/colinux-build
    cd /home/$USER/colinux-build
    tar xfz colinux-20040807.tar.gz
    cd colinux-20040807/bin
    chmod +x *.sh
    ./download-all.sh
    
Files will be download into directory /home/$USER/colinux-build/download.

    cd /home/$USER/colinux-build/colinux-20040807/bin
    ./build-all.sh

This is a completly build process for binutils, cross compiler, libraries,
kernel and colinux daemons. (Half hour on 1.8MHz Pentium)

Compiled executables for windows haost stored in directory mingw32/dist now.


3.2.2 Configuration script compiling

Edit bin/user-build.cfg and set some directories.
It's unsave to use a relative path in this build script. Mostly the TOPDIR is
the bin directory, but not in all cases!

download-all.sh			Download all missing files
build-all.sh			Extract (OVERWRITE!) and compile all files
    build-cross.sh		Extract and compile the cross compiler
    build-colinux-libs.sh	Extract and compile all libs
    build-kernel.sh		Extract, patch and compile the kernel
    build-colinux.sh		Recompile only the colinux daemons

! Any starts of compile script will delete all source and extract it again!
! If you have changed some sources, do not use these scripts!
! Call "make" into directory manualy!

After Download a new version of colinux daemons you should only extract source
at same top level directory and run the last scripts build-kernel.sh and
build-colinux.sh. In some cases you must also compile the libs. The cross compiler
mostly you never need compile again.


3.2.3 Source tree sample for a mingw build process

Source tree before building the cross compiler:
/colinux-build
    +-- colinux-20040807/
    |	+-- bin/
    |	|   +-- download-all.sh	(Download all files only)
    |	|   +-- build-all.sh	(Compile for Win32, download missing files)
    |	|   ...
    |	+-- src/
    |	... ...
    +-- download/
        +-- binutils-2.15.90-20040222-1-src.tar.gz
        +-- colinux-20040710.tar.gz
        +-- fltk-1.1.4-source.tar.bz2
        +-- gcc-core-3.3.1-20030804-1-src.tar.gz
        +-- gcc-g++-3.3.1-20030804-1-src.tar.gz
        +-- linux-2.6.7.tar.bz2
        +-- mingw-runtime-3.3.tar.gz	(3.2 also runs)
        +-- mxml-1.3.tar.gz
        +-- w32api-2.5-src.tar.gz
        +-- w32api-2.5.tar.gz
        +-- wpdpack_3_0.zip


Source tree after building cross compiler and colinux binaries:
/colinux-build
    +-- colinux-20040807/
    |   ...
    +-- download/		(cross working dirs)
    |   +-- binutils-2.15.90-20040222-1/
    |   +-- fltk-1.1.4/
    |   +-- gcc-3.3.1-20030804-1/
    |   +-- linux-2.6.7/
    |   +-- mxml-1.3/
    |   +-- w32api-2.5/
    |   +-- wpdpack/
    |   ... Source files ...
    +-- linux/	(link to linux-2.6.7)
    +-- mingw32/
	+-- bin/
	|   ... Cross compiler binaries (e.g. i686-pc-mingw32-gcc) ...
	+-- dist/		(Binaries for target)
        |   +-- colinux-console-fltk.exe
        |   +-- colinux-console-nt.exe
        |   +-- colinux-daemon.exe
        |   +-- colinux-net-daemon.exe
        |   +-- linux.sys
        |   +-- vmlinux
	+-- i686-pc-mingw32/
	|   +-- bin/
	|   |   ... Cross compiler binaries (e.g. gcc) ...
	|   +-- bin/
	|   |   ... Cross compiler static libraries (e.g. libfltk.a) ...
	+-- include/
	+-- info/
	+-- lib/
	+-- man/
	+-- share/


3.3. For Linux as host

For building and runnning coLinux on Linux you need:

1. Tree or headers of the designated host kernel available, in order to build 
the kernel module (colinux.ko).
2. mxml-1.2 and a patched fltk-1.1.4 (see patch directory) installed in the 
system (./configure ; make ; make install)
3. Properly set the environment variables (e.g.):

  export COLINUX_TARGET_KERNEL_PATH=/path/to/your/patched/colinux/kernel/tree
  export COLINUX_HOST_KERNEL_DIR=/path/to/your/host/kernel
  export COLINUX_HOST_OS=linux
  
And run make in the 'src' dir.

Running it is quite simple. For example, consider these list of files:

-rwxr-xr-x  1 root root  566805 Jun 21 13:02 colinux-console-fltk
-rwxr-xr-x  1 root root  289478 Jun 21 09:58 colinux-daemon
-rwxr-xr-x  1 root root  107509 Jun 21 09:58 colinux-net-daemon
-rwxr-xr-x  1 root root  115637 Jun 21 13:02 colinux-serial-daemon
-rw-r--r--  1 root root  341519 Jun 21 13:02 colinux.ko
-rw-r--r--  1 root root     399 Jun  5 18:17 default.colinux.xml
-rwxr-xr-x  1 root root 2614823 Jun 21 13:02 vmlinux

The steps are basically:
       
    insmod colinux.ko
    PATH=.:$PATH colinux-daemon -c default.colinux.xml

This much like the Windows port except where the logic around the installation 
of the driver is more simple.
    
PATH=.:$PATH is needed if the executables aren't installed in your e.g 
/usr/local/bin or elsewhere in $PATH.
