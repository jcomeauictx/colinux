Building Cooperative Linux            Dan Aloni, da-x@colinux.org
=================================================================

Table of Contents

  1. Prerequisites
  2. Compiling the Cooperative Linux kernel (the vmlinux file)
  3. Compiling the OS support code
  3.1. Build Dependencies
  3.2. For Microsoft Windows as host
  3.2.1 Complete download and building for Win32 under Linux (mingw32)
  3.2.2 Configuration script compiling
  3.2.3 Source tree sample for a mingw build process
  3.3. For Linux as host
  3.3.1 For Linux as host with different libraries (FLTK version)
  4. configure - make - make installer
  4.1 configure
  4.2 make download
  4.3 make
  4.4 make package
  4.5 make installer
  4.6 make clean
  4.7 make disclean
  4.8 Comments about configure system
  5. Private kernel config or patches
  5.1 Private kernel config only
  5.2 Private kernel patches and config

=================================================================

1. Prerequisites
----------------

When compiling coLinux to run on Linux of the same architecture, 
only one compiler can to be used.

For cross compiling, the components that comprise coLinux need 
to be compiled using 2 differently targeted versions of GCC 
(http://gcc.gnu.org). One gcc is required for the native Linux 
architecture that coLinux designed to run on (e.g, i686-pc-linux), 
and the other version is used to compiled binary executables and 
drivers for the host OS (e.g, i686-pc-mingw32).

The versions of the two compilers need to match as closely as 
possible. Versions 2.95.x, 3.1.x, 3.2.x and 3.3.x of gcc are 
not guaranteed to be ABI-compatible.

If your compiler for kernel building and daemons don't match the 
right version, you can't run colinux.  The daemon blocks this.

To resolve these problems, you should build the Linux compiler 
(i686-co-linux) and the Win32 compiler (i686-pc-mingw32) from 
same source of gnu/gcc and put it in first search PATH.
You can set variables 'COLINUX_GCC_GUEST*' in bin/*.cfg. The 
scripts will automatic build and use the specific compiler.


2. Compiling the Cooperative Linux kernel (the vmlinux file)
------------------------------------------------------------

Unpack the source tarball of coLinux.  Locate the file linux-2.6.12.diff
in the directory ./patch. This file give you the kernel version.
(version 2.6.12 for instance, can be obtained from www.kernel.org) 
Unpack the kernel tar in home directory. Make sure that the directory 
of the Linux kernel is named 'linux-2.6.12'.

Apply the patch found in the ./patch directory of the Cooperative 
Linux tarball, to the Linux kernel. If conflicts arrise, then it is 
possible that there is a mismatch between the version of the kernel 
and the version that the patch is designed to apply to.

For example:
    ~/# wget http://www.kernel.org/pub/linux/kernel/2.6/linux-2.6.12.tar.bz2
    ~/# bunzip2 -dc linux-2.6.12.tar.bz2 | tar x
    ~/# cd linux-2.6.12
    ~/linux-2.6.12# patch -p1 < PathToColinux/patch/linux-2.6.12.diff

The coLinux package is supplied with a premaid Linux kernel
configuration file. Copy it to your Linux tree:

    ~/linux-2.6.12# cp PathToColinux/conf/linux-config .config

Update config and build vmlinux:
    ~/linux-2.6.12# make oldconfig
    ~/linux-2.6.12# make vmlinux

For new module build it and install:
    ~/linux-2.6.12# make modules
    ~/linux-2.6.12# su -c "make modules_install"

Then test to run this unchanged kernel with your daemons.  After these
steps you can modify kernel config or adding some special patches and
rebuild your special kernel.  But please: Don't enable device drivers with
direct hardware access (ISA-, PCI- or VL-Bus) and don't change cpu specific
configs.  This would mostly crash your system.


3. Compiling the OS support code
--------------------------------

Compiling the operating system dependent support code is a little more
complex. The current build system assumes a cross compiler toolchain is 
installed for that purpose. 

3.1. Build Dependencies

Cross platform
  * MinGW (version 3.x)

The coLinux console depends on:
  * FLTK (major version 1)

Python build system
  * Python interpreter 2.3 or 2.4


3.2. For Microsoft Windows as host

3.2.1 Complete download and building for Win32 under Linux (mingw32)

===> See also step "4. configure - make" build processing. <===

To compile source for a Windows target, the compiler must be self compiled
for this target. You can not download a binary of this compiler!

This need a Compiler devel-libs and a lot of tools:
(Versions from my installation. Others works also. Run ./configure script.)
    bison-1.75		need by binutils (yacc 91.7.30 have error YYEMPTY)
    flex-2.5.4		need by binutils (arlex.l: Permission denied)
    gnu/gcc 3.3.1
    make-3.80
    module-init-tools-0.9.14
    patch-2.5.9
    python2.3		for colinux build system, need version 2.3.x!
    texinfo-4.5		need by binutils
    unzip-5.50.0	extracing winapi source
    wget-1.8.2		download source files
    zip-2.3		packing pre releases
    ... and many more ...

Create a new directory, extract colinux source in this directory, set 
scripts executable and ran the download script in "bin" directory.

    mkdir $HOME/colinux-devel
    cd $HOME/colinux-devel
    tar xfz colinux-20040807.tar.gz
    cd colinux-20040807/bin
    chmod +x *.sh
    ./download-all.sh
    
Files will be downloaded into directory $HOME/colinux-devel/download.

    cd $HOME/colinux-devel/colinux-20040807/bin
    ./build-all.sh

This is a complete build process for binutils, cross compiler, libraries,
kernel and colinux daemons. (~40 Minutes on 1.8MHz Pentium)

The build process based on script build-all.sh works completly at top-level
directory colinux-devel. The cross-compiler was also installed in users 
directory (not system wide). We never need root rights for installing 
headers, libs or programs.

Compiled executables for Windows host stored in directory mingw32/dist now.


3.2.2 Configuration script compiling

Edit bin/user-build.cfg and set some directories.
It's unsafe to use a relative path in this build script. Mostly the BINDIR is
the bin directory, but not in all cases!

download-all.sh			Download all missing files
build-all.sh			Extract (OVERWRITE!) and compile all files
    build-cross.sh		Extract and compile the cross compiler
    build-colinux-libs.sh	Extract and compile all libs
    build-kernel.sh		Extract, patch, compile the kernel and modules
    build-colinux.sh		Recompile only the colinux daemons and console

! Any starts of build-kernel.sh will delete all source and extract it again !
! If you have changed some kernel sources, do not use these script          !
! Call "make menuconfig" and "make vmlinux" into kernel directory manually  !

After Downloading a new version of colinux source, should only extract source
at same top level directory and run the last scripts build-kernel.sh and
build-colinux.sh. In some cases you might also need to compile the libs.
The cross compiler mostly you never need compile again.

The work of build-all.sh is controlled by md5sum of some sources and some
target files. Md5sum is updated after complety build step and put as file
.build-*.md5 in 'BUILD' directory.

Call as 'build-all.sh --rebuild-all' will ignore md5sum and builds all
cross tools, cross compiler, libraries and target files again.

Single script can also use to recompile one step. For instance you can rebuild
the win32k-api and fltk library by calling 'cd bin ; ./build-colinux-libs.sh'


3.2.3 Source tree sample for a mingw build process

Source tree before building the cross compiler:
/colinux-devel
    +-- colinux-20050322/
    |	+-- bin/
    |	|   +-- download-all.sh			(Download all files only)
    |	|   +-- build-all.sh			(Compile for Win32,
    |	|   ...					 download missing files)
    |	+-- src/
    |	... ...
    +-- download/
        +-- binutils-2.15.90-20040222-1-src.tar.gz
        +-- colinux-20050322.tar.gz
        +-- fltk-1.1.6-source.tar.bz2
        +-- gcc-core-3.3.1-20030804-1-src.tar.gz
        +-- gcc-g++-3.3.1-20030804-1-src.tar.gz
        +-- linux-2.x.y.tar.bz2			(version of colinux kernel)
        +-- mingw-runtime-3.6.tar.gz
        +-- w32api-3.3-src.tar.gz
        +-- w32api-3.3.tar.gz
        +-- wpdpack_3_0.zip


Source tree after building cross compiler and colinux binaries:
/colinux-devel					$USER_TOPDIR
    +-- colinux-20050322/				
    |   ... Colinux sources
    +-- build/					$BUILD_DIR
    |   +-- binutils-2.15.90-20040222-1/	(cross working dirs,
    |   +-- fltk-1.1.4/				 deleted after build)
    |   +-- gcc-3.3.1-20030804-1/
    |   +-- w32api-3.3/
    |   +-- wpdpack/
    |   +-- linux-2.x.y-source/			$COLINUX_TARGET_KERNEL_SOURCE
    |   |   ... kernel sources
    |   +-- linux-2.x.y-build/			$COLINUX_TARGET_KERNEL_BUILD
    |       ... kernel building dir
    |       +--_install/                        $COLINUX_TARGET_MODULE_PATH
    |          +-- lib
    |              +-- modules
    |                  +-- 2.x.y-co-0.7.1/
    |                      +-- kernel/
    |                      |   +-- ... Some modules.ko ...
    |                      +-- modules.dep
    +-- dist/					$COLINUX_INSTALL_DIR
    |   +-- daemons-0.7.1.zip			(Binaries for target)
    |   |   +-- colinux-console-fltk.exe
    |   |   +-- colinux-console-nt.exe
    |   |   +-- colinux-daemon.exe
    |   |   +-- colinux-net-daemon.exe
    |   |   +-- colinux-*.exe			(Some more colinux daemons)
    |   |   +-- linux.sys			(Windows colinux driver)
    |   +-- vmlinux-0.7.1.zip
    |   |   +-- vmlinux				(kernel)
    |   +-- modules-2.x.y-co-0.7.1.tgz		(Modules for target kernel)
    +-- download/				$SOURCE_DIR
    |   ... Source files ...			(source store here)
    +-- log/					$COLINUX_BUILD_LOG
    |   +-- build-colinux-$$.log		(Logfiles of build process)
    +-- mingw32/				$PREFIX
	+-- bin/
        |   +-- i686-pc-mingw32-gcc
	|   ... Cross compiler binaries with prefix 'i686-pc-mingw32-'
	+-- i686-co-linux/
	|   +-- bin/				$COLINUX_GCC_GUEST_PATH
	|   |   +-- i686-co-linux-gcc
	|   |   ... Compiler for kernel build with prefix 'i686-co-linux-'
	|   +-- i686-pc-linux-gnu/
	|   |   +-- bin/
	|   |       +-- gcc
	|   |       ... Compiler for kernel build without prefix
        |   +-- include/
        |   +-- info/
        |   +-- lib/				(for Linux as host)
	|       +-- libstdc++.so.6.0.3
	|       +-- libstdc++.a
	|       ... Linux libraries for this compiler
        |   +-- man/
        |   +-- share/
	+-- i686-pc-mingw32/
	|   +-- bin/
	|   |   +-- gcc
	|   |   ... Cross compiler binaries without prefix
	|   +-- lib/
	|       ... Cross compiler static libraries (e.g. libfltk.a) ...
	+-- include/
	+-- info/
	+-- lib/
	+-- man/
	+-- share/


3.3. For Linux as host

For building and runnning coLinux on Linux you need:

1. Tree or headers of the designated host kernel available, in order to build 
   the kernel module (colinux.ko).
   Currently works only with host kernel 2.6.x, testet up to 2.6.8.1,
   2.6.10 - 2.6.16
2. patched fltk-1.1.6 (see patch directory) installed in the 
   system (./configure ; make ; su -c "make install")
   You can also install this version local under your HOME (see below).
3. Properly set the environment variables (e.g.):

  export COLINUX_TARGET_KERNEL_PATH=/path/to/your/patched/colinux/kernel/tree
  export COLINUX_HOST_KERNEL_DIR=/path/to/your/host/kernel
  export COLINUX_HOST_OS=linux
  
And run make in the 'src' dir.

Running it is quite simple. For example, consider these list of files:

-rwxr-xr-x  1 root root  566805 Jun 21 13:02 colinux-console-fltk
-rwxr-xr-x  1 root root  289478 Jun 21 09:58 colinux-daemon
-rwxr-xr-x  1 root root  107509 Jun 21 09:58 colinux-net-daemon
-rwxr-xr-x  1 root root  115637 Jun 21 13:02 colinux-serial-daemon
-rw-r--r--  1 root root  341519 Jun 21 13:02 colinux.ko
-rw-r--r--  1 root root     399 Jun  5 18:17 colinux.cfg
-rwxr-xr-x  1 root root 2614823 Jun 21 13:02 vmlinux

The steps are basically:

    xhost +
    su
    insmod colinux.ko
    PATH=.:$PATH colinux-daemon @colinux.cfg

This much like the Windows port except where the logic around the installation 
of the driver is more simple.

You shoult run colinx in a graphic environment, KDE, Gnome or after 'startx'.
'xhost +' allows root (su) to use your user desktop (access control disabled).

PATH=.:$PATH is needed if the executables aren't installed in your e.g 
/usr/local/bin or elsewhere in $PATH.


3.3.1 For Linux as host with different libraries (FLTK version)

- Patch and build fltk from source

  cd /tmp
  tar xfj fltk-1.1.6-source.tar.bz2
  cd fltk-1.1.6
  patch -p1 < colinux-source/patch/fltk-1.1.6-linux.diff
  ./configure --prefix=$(HOME)/i686-pc-linux-local
  make -C src
  make -C src install
  make -C FL install
  cd /tmp
  rm -r fltk-1.1.6

- Run colinux build with path to FLTK libraries

  export COLINUX_TARGET_KERNEL_PATH=/path/to/your/patched/colinux/kernel/tree
  export COLINUX_HOST_KERNEL_DIR=/path/to/your/host/kernel
  export COLINUX_HOST_OS=linux
  export COLINUX_CFLAGS="-I$(HOME)/i686-pc-linux-local/include"
  export COLINUX_LFLAGS="-L$(HOME)/i686-pc-linux-local/lib"
  cd colinux-source/src
  make


4. configure - make - make installer
------------------------------------

4.1 configure

Call './configure' in toplevel directory will create the file 
bin/user-build.cfg with absolute paths of your installation.

Default target is winnt. Mostly directories can overwrite by options.
Please run './configure --help' for list of options.

Sample for WinNT as host (default):
  ./configure --target=i686-pc-mingw32 \
        --downloaddir=$HOME/colinux-devel/download \
        --prefix=$HOME/colinux-devel/mingw32

For Linux as Host must use the option '--target=i686-pc-linux'. Host kernel
directories will automatic detect. You can overwrite with --hostkerneldir.

Sample for Linux as host:
  ./configure --target=i686-pc-linux \
        --downloaddir=$HOME/colinux-devel/download \
        --targetkerneldir=$HOME/colinux-devel/download/linux-2.x.y
        --hostkerneldir=/usr/src/linux


4.2 make download

'make download' is optional. It downloads all missing source files.


4.3 make

Call 'make' in toplevel directory (not in src/) to build all cross tools, cross
compiler, libraries and target. Makefile is only a wrapper for bin/build-*.sh
sripts. Settings in bin/user-build.cfg must congruent with settings in toplevel
Makefile.

Missing source files will be download with wget.

To control the 'out of date' this Makefile use not timestamps. Monotone checkout
or download can not handle timestamp. So we use md5sum to check new sources,
patches or configuration. Every compile step update the md5sum file at the end.


4.4 make package

'make package' will copy executables as ZIP file on dist directory.


4.5 make installer

'make installer' build complete colinux installer. This need wine, "makensis"
and more win32 installer tools.


4.6 make clean

This cleans only the source tree of colinux daemons. The cross tools and
libraries are untouched.


4.7 make disclean

This remove also control files for md5sum and user-build.cfg.
After this step you must './configure' again. Next 'make' will also rebuild the
cross tools and libraries.


4.8 Comments about configure system

This script is not the same as in some other software projects. This script do
not detect all needed tools and host environments. It do only create a simple
config to have fun for "standard" linux projects ala "./configure && make".
It should help some newbies to compile colinux.

Actual version of configure provided only targets i686-pc-mingw32 or
i686-pc-linux. No other strings supported. (Sorry, configure is very simple.)


5. Private kernel config or patches
-----------------------------------

patch/linux-private.patch
This file will be patch after extract kernel and patch maintainer kernel,
before kernel will be configure.
You can put something changes on .config file or kernel sources in this file.

Store patch/linux-private.patch, before call bin/build-kernel.sh or make.


5.1 Private kernel config only
------------------------------

To create private configfile, you should diff colinux config with your config
and store this in file patch/linux-private.patch.
Run this steps, if you have patched colinux kernel in download directory:
 # cd coLinuxDownloadPath/linux-2.x.y
 # make menuconfig
 ... configure your kernel and save file .config ...
 # cd ..
 # diff -ur coLinuxDevelPath/patch/linux linux-2.x.y/.config > linux-private.patch


5.2 Private kernel patches and config
-------------------------------------

To create private pathfile for kernel source, you should diff colinux
kernel with your kernel source and configuration.
"PRIVATE" is your kernel, configured and also patched for colinux.
"VANILLA" is the current kernel version, supported from colinux.
Please remember: Your private kernel tree should start one directory up
from source (patch will be call with -p1)!
 # VANILLA=linux-2.x.y
 # PRIVATE=$HOME/src/linux-2.x.y-private
 # cd /tmp
 # tar xfj $VANILLA.bz2
 # cd $VANILLA
 # patch -p1 < DevelPath/patch/$VANILLA.diff
 # cd $PRIVATE
 ... here you can "make menuconfig" for aditional configuration ...
 # cd ..
 # wget http://www.moses.uklinux.net/patches/dontdiff
 # diff -urN -X dontdiff /tmp/$VANILLA $PRIVATE > linux-private.patch
 # diff -u DevelPath/conf/linux-config $PRIVATE/.config >> linux-private.patch
 # rm -rf dontdiff /tmp/$VANILLA
