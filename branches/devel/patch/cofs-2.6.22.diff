Implements host filesystem support


Index: linux-2.6.22-source/fs/Kconfig
===================================================================
--- linux-2.6.22-source.orig/fs/Kconfig
+++ linux-2.6.22-source/fs/Kconfig
@@ -1169,6 +1169,19 @@
 	  containing the directory /) cannot be compiled as a module.
 
 
+config COFUSE_FS
+	tristate "Cooperative Host file system support (COFUSE)"
+	depends on COOPERATIVE
+	default y
+	help
+	  In Cooperative mode, this file system allows you to mount an host
+	  directory structure to a local mountpoint.
+	  COFUSE (Cooperative FUSE) is based on the original FUSE
+	  (File System in User Space).
+
+	  To compile the cofuse support as a module, choose M here: the
+	  module will be called cofusefs.
+
 
 config EFS_FS
 	tristate "EFS file system support (read only) (EXPERIMENTAL)"
Index: linux-2.6.22-source/fs/Makefile
===================================================================
--- linux-2.6.22-source.orig/fs/Makefile
+++ linux-2.6.22-source/fs/Makefile
@@ -106,6 +106,7 @@
 obj-$(CONFIG_AUTOFS4_FS)	+= autofs4/
 obj-$(CONFIG_ADFS_FS)		+= adfs/
 obj-$(CONFIG_FUSE_FS)		+= fuse/
+obj-$(CONFIG_COFUSE_FS)		+= cofusefs/
 obj-$(CONFIG_UDF_FS)		+= udf/
 obj-$(CONFIG_SUN_OPENPROMFS)	+= openpromfs/
 obj-$(CONFIG_JFS_FS)		+= jfs/
Index: linux-2.6.22-source/fs/cofusefs/Makefile
===================================================================
--- /dev/null
+++ linux-2.6.22-source/fs/cofusefs/Makefile
@@ -0,0 +1,8 @@
+#
+# Makefile for the Linux cofuse filesystem routines.
+#
+
+obj-$(CONFIG_COFUSE_FS) += cofusefs.o
+
+cofusefs-objs := inode.o dir.o file.o util.o dev.o
+
Index: linux-2.6.22-source/fs/cofusefs/file.c
===================================================================
--- linux-2.6.22-source.orig/fs/cofusefs/file.c
+++ linux-2.6.22-source/fs/cofusefs/file.c
@@ -42,7 +42,7 @@
 	in.args[0].value = &inarg;
 	request_send(fc, &in, &out);
 	if(!out.h.error && !(fc->flags & FUSE_KERNEL_CACHE)) {
-		invalidate_inode_pages(inode->i_mapping);
+		invalidate_mapping_pages(inode->i_mapping, 0, -1);
 	}
 
 	return out.h.error;
@@ -258,12 +258,12 @@
 
 	if(fc->flags & FUSE_LARGE_READ) {
 		/* Don't allow this to get mixed up with writes */
-		down(&inode->i_sem);
+		mutex_lock(&inode->i_mutex);
 		fuse_file_bigread(mapping, inode, *ppos, count);
-		up(&inode->i_sem);
+		mutex_unlock(&inode->i_mutex);
 	}
 
-	return generic_file_read(filp, buf, count, ppos);
+	return do_sync_read(filp, buf, count, ppos);
 }
 
 static int write_buffer(struct inode *inode, struct page *page,
@@ -343,10 +343,10 @@
 	unsigned int s = sizeof(struct fuse_in) + sizeof(struct fuse_out) +
 		sizeof(struct fuse_write_in);
 
-	in = kmalloc(s, GFP_NOFS);
+	in = kzalloc(s, GFP_NOFS);
 	if(!in)
 		return -ENOMEM;
-	memset(in, 0, s);
+
 	out = (struct fuse_out *)(in + 1);
 	inarg = (struct fuse_write_in *)(out + 1);
 
@@ -422,8 +422,11 @@
 }
 
 static struct file_operations fuse_file_operations = {
+	.llseek		= generic_file_llseek,
 	.read		= fuse_file_read,
-	.write		= generic_file_write,
+	.aio_read	= generic_file_aio_read,
+	.write		= do_sync_write,
+	.aio_write	= generic_file_aio_write,
 	.mmap		= generic_file_mmap,
 	.open		= fuse_open,
 	.release	= fuse_release,
Index: linux-2.6.22-source/fs/cofusefs/fuse_i.h
===================================================================
--- linux-2.6.22-source.orig/fs/cofusefs/fuse_i.h
+++ linux-2.6.22-source/fs/cofusefs/fuse_i.h
@@ -11,8 +11,6 @@
 
 
 #include <linux/version.h>
-#include <linux/config.h>
-#include <linux/cooperative_internal.h>
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0) && LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
 #error Kernel version 2.5.* not supported
@@ -23,6 +21,7 @@
 #include <linux/fs.h>
 #include <linux/list.h>
 #include <linux/spinlock.h>
+#include <linux/cooperative_internal.h>
 
 /** Read combining parameters */
 #define FUSE_BLOCK_SHIFT 16
Index: linux-2.6.22-source/fs/cofusefs/dir.c
===================================================================
--- linux-2.6.22-source.orig/fs/cofusefs/dir.c
+++ linux-2.6.22-source/fs/cofusefs/dir.c
@@ -11,6 +11,8 @@
 #include <linux/pagemap.h>
 #include <linux/slab.h>
 #include <linux/file.h>
+#include <linux/jiffies.h>
+#include <linux/sched.h>
 
 static struct inode_operations fuse_dir_inode_operations;
 static struct inode_operations fuse_file_inode_operations;
@@ -26,14 +28,13 @@
 static void change_attributes(struct inode *inode, struct fuse_attr *attr)
 {
 	if(S_ISREG(inode->i_mode) && i_size_read(inode) != attr->size)
-		invalidate_inode_pages(inode->i_mapping);
+		invalidate_mapping_pages(inode->i_mapping, 0, -1);
 
 	inode->i_mode    = (inode->i_mode & S_IFMT) + (attr->mode & 07777);
 	inode->i_nlink   = attr->nlink;
 	inode->i_uid     = attr->uid;
 	inode->i_gid     = attr->gid;
 	i_size_write(inode, attr->size);
-	inode->i_blksize = PAGE_CACHE_SIZE;
 	inode->i_blocks  = attr->blocks;
 	inode->i_atime.tv_sec   = attr->atime;
 	inode->i_atime.tv_nsec  = 0;
@@ -63,7 +64,7 @@
 		init_special_inode(inode, inode->i_mode,
 				   new_decode_dev(attr->rdev));
 	}
-	inode->u.generic_ip = inode;
+	inode->i_private = inode;
 }
 
 struct inode *fuse_iget(struct super_block *sb, ino_t ino,
@@ -73,7 +74,7 @@
 
 	inode = iget(sb, ino);
 	if(inode) {
-		if(!inode->u.generic_ip)
+		if (!inode->i_private)
 			fuse_init_inode(inode, attr);
 
 		change_attributes(inode, attr);
Index: linux-2.6.22-source/fs/cofusefs/inode.c
===================================================================
--- linux-2.6.22-source.orig/fs/cofusefs/inode.c
+++ linux-2.6.22-source/fs/cofusefs/inode.c
@@ -74,8 +74,9 @@
 	stbuf->f_namelen = attr->namelen;
 }
 
-static int fuse_statfs(struct super_block *sb, struct kstatfs *buf)
+static int fuse_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
+	struct super_block *sb = dentry->d_sb;
 	struct fuse_conn *fc = SB_FC(sb);
 	struct fuse_in in = FUSE_IN_INIT;
 	struct fuse_out out = FUSE_OUT_INIT;
@@ -134,12 +135,10 @@
 	if (cofs_volumes[index])
 		return cofs_volumes[index];
 
-	conn = kmalloc(sizeof(struct fuse_conn), GFP_KERNEL);
+	conn = kzalloc(sizeof(struct fuse_conn), GFP_KERNEL);
 	if (!conn)
 		return NULL;
 
-	memset(conn, 0, sizeof(*conn));
-
 	if (*next == ':')
 		snprintf(conn->opt_pathname, sizeof(conn->opt_pathname), "%s", next+1);
 
@@ -381,9 +380,9 @@
         return c;
 }
 
-static struct super_block *fuse_get_sb(struct file_system_type *fs_type,
+static int fuse_get_sb(struct file_system_type *fs_type,
 				       int flags, const char *dev_name,
-				       void *raw_data)
+				       void *raw_data, struct vfsmount *mnt)
 {
 	struct cofuse_mount_data co_md = {0, };
 	struct fuse_mount_data md = {0, };
@@ -398,7 +397,7 @@
 
 	ret = parse_options(&co_md, raw_data);
 	if (ret == -1)
-		return ERR_PTR(-EINVAL);
+		return -EINVAL;
 
 	md.rootmode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
 	md.flags = FUSE_ALLOW_OTHER | FUSE_DEFAULT_PERMISSIONS | co_md.flags;
@@ -406,7 +405,7 @@
 	co_md.fuse = &md;
 	snprintf(co_md.name, sizeof(co_md.name), "%s", dev_name);
 
-	return get_sb_nodev(fs_type, flags, &co_md, fuse_read_super);
+	return get_sb_nodev(fs_type, flags, &co_md, fuse_read_super, mnt);
 }
 
 static struct file_system_type fuse_fs_type = {
@@ -417,7 +416,7 @@
 	.fs_flags	= FS_BINARY_MOUNTDATA,
 };
 
-int fuse_fs_init()
+int __init fuse_fs_init()
 {
 	int res;
 
