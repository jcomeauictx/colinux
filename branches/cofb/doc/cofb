for startup config file example,
video=cofb:800x600x32

Use cofb under X window (based on usage on debian distribution)
framebuffer X driver, install xserver-xorg-video-fbdev from aptitude

To let detect X auto detect mouse
ln -s /dev/input/mouse0 /dev/mouse
To disable X window mouse acceleration.
xset m 1 0 

cofb added features,
frame buffer drivers/video/covideo.c
mouse drivers/mouse/comouse.c
copy to guest through fltk paste event and send scancode directly to guest.

some links,
colinux cofb internal, https://docs.google.com/document/pub?id=1FH_D4ukhfqxUFd1aZj6NiN1NVX2EBrzrXxwLpQTRkMo


-----------------------------------------
# python program to test mouse driver
def pos(x):
  if x > 127:return x-256
  return x

f=open("/dev/input/mouse0","r")
while True:
  s = f.read(3)
  opcode = ord(s[0])
  x = ord(s[1])
  y = ord(s[2])
  dir = opcode>>4
  btn = opcode%16  
  print dir,btn>>3,btn%8,' ',pos(x),-pos(y)

------------------------------------------
# c program to test framebuffer

    #include <unistd.h>
    #include <stdio.h>
    #include <fcntl.h>
    #include <linux/fb.h>
    #include <sys/mman.h>

    int main()
    {
        int fbfd = 0;
        struct fb_var_screeninfo vinfo;
        struct fb_fix_screeninfo finfo;
        long int screensize = 0;
        char *fbp = 0;
        int x = 0, y = 0;
        long int location = 0;

        // Open the file for reading and writing
        fbfd = open("/dev/fb0", O_RDWR);
        if (!fbfd) {
            printf("Error: cannot open framebuffer device.\n");
            exit(1);
        }
        printf("The framebuffer device was opened successfully.\n");

        // Get fixed screen information
        if (ioctl(fbfd, FBIOGET_FSCREENINFO, &finfo)) {
            printf("Error reading fixed information.\n");
            exit(2);
        }

        // Get variable screen information
        if (ioctl(fbfd, FBIOGET_VSCREENINFO, &vinfo)) {
            printf("Error reading variable information.\n");
            exit(3);
        }

        printf("%dx%d, %dbpp,linelenght %d,offset %d,%d\n", vinfo.xres, vinfo.yres, vinfo.bits_per_pixel,finfo.line_length,vinfo.xoffset,vinfo.yoffset);

        // Figure out the size of the screen in bytes
        screensize = vinfo.xres * vinfo.yres * vinfo.bits_per_pixel / 8;

        // Map the device to memory
        fbp = (char *)mmap(0, screensize, PROT_READ | PROT_WRITE, MAP_SHARED,
                           fbfd, 0);
        if ((int)fbp == -1) {
            printf("Error: failed to map framebuffer device to memory.\n");
            exit(4);
        }
        printf("The framebuffer device was mapped to memory successfully.\n");


        // Figure out where in memory to put the pixel
        for (y = 100; y < 300; y++)
            for (x = 100; x < 300; x++) {
                location = (x+vinfo.xoffset) * (vinfo.bits_per_pixel>>3) +
                           (y+vinfo.yoffset) * finfo.line_length;
                if (vinfo.bits_per_pixel == 32) {
                    *(fbp + location) ^= (x-100)*(y-100);        // Some blue
                    *(fbp + location + 1) ^= 15+(x-100);     // A little green
                    *(fbp + location + 2) ^= 200-(y-100);    // A lot of red
                    *(fbp + location + 3) = 0x7f;      // transparency
                } else  { //assume 16bpp
                    int b = 10;
                    int g = (x-100)/6;     // A little green
                    int r = 31-(y-100)/16;    // A lot of red
                    unsigned short int t = r<<11 | g << 5 | b;
                    *((unsigned short int*)(fbp + location)) = t;
                }

            }
        munmap(fbp, screensize);
        close(fbfd);
        return 0;
    }
